{
	"info": {
		"_postman_id": "df30c550-b119-4e59-9b9d-5c6fb0f9f289",
		"name": "API Integration Tests Backend",
		"description": "Collection of integration tests for the reco api.\nMade with Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "/similar_offers/offer_id wakeup call",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 504\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 504]);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{api_url}}/similar_offers/{{offer_id}}",
					"host": [
						"{{api_url}}"
					],
					"path": [
						"similar_offers",
						"{{offer_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "/similar_offers/offer_id no params",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 10s\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});\r",
							"pm.test(\"Response must be a JSON and have a body\", function () {\r",
							"     pm.response.to.be.ok;\r",
							"     pm.response.to.be.withBody;\r",
							"     pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Response must contain an array results\", function () {\r",
							"  const jsonResponse = pm.response.json();\r",
							"  pm.expect(jsonResponse).to.be.an(\"object\");\r",
							"  pm.expect(jsonResponse).to.have.property('results')\r",
							"  pm.expect(jsonResponse.results).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response must at least 1 offer\", function () {\r",
							"  const jsonResponse = pm.response.json();\r",
							"  pm.expect(jsonResponse.results.length).to.be.above(0);\r",
							"});\r",
							"\r",
							"function checkIfArrayIsUnique(array) {\r",
							"  return array.length === new Set(array).size;\r",
							"}\r",
							"\r",
							"pm.test('Check if Offer_ids are unique', () => {\r",
							"    let ids = []\r",
							"    _.each(pm.response.json().results, (item) => {\r",
							"        ids.push(item)\r",
							"    })\r",
							"\r",
							"    pm.expect(checkIfArrayIsUnique(ids), ids).to.be.true\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{api_url}}/similar_offers/{{offer_id}}",
					"host": [
						"{{api_url}}"
					],
					"path": [
						"similar_offers",
						"{{offer_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "/similar_offers/offer_id geoloc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 10s\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});\r",
							"pm.test(\"Response must be a JSON and have a body\", function () {\r",
							"     pm.response.to.be.ok;\r",
							"     pm.response.to.be.withBody;\r",
							"     pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Response must contain an array results\", function () {\r",
							"  const jsonResponse = pm.response.json();\r",
							"  pm.expect(jsonResponse).to.be.an(\"object\");\r",
							"  pm.expect(jsonResponse).to.have.property('results')\r",
							"  pm.expect(jsonResponse.results).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response must at least 1 offer\", function () {\r",
							"  const jsonResponse = pm.response.json();\r",
							"  pm.expect(jsonResponse.results.length).to.be.above(0);\r",
							"});\r",
							"\r",
							"function checkIfArrayIsUnique(array) {\r",
							"  return array.length === new Set(array).size;\r",
							"}\r",
							"\r",
							"pm.test('Check if Offer_ids are unique', () => {\r",
							"    let ids = []\r",
							"    _.each(pm.response.json().results, (item) => {\r",
							"        ids.push(item)\r",
							"    })\r",
							"\r",
							"    pm.expect(checkIfArrayIsUnique(ids), ids).to.be.true\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{api_url}}/similar_offers/{{offer_id}}?longitude=2.3688874&latitude=48.8632553",
					"host": [
						"{{api_url}}"
					],
					"path": [
						"similar_offers",
						"{{offer_id}}"
					],
					"query": [
						{
							"key": "longitude",
							"value": "2.3688874"
						},
						{
							"key": "latitude",
							"value": "48.8632553"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/similar_offers/offer_id categories",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 10s\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});\r",
							"pm.test(\"Response must be a JSON and have a body\", function () {\r",
							"     pm.response.to.be.ok;\r",
							"     pm.response.to.be.withBody;\r",
							"     pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Response must contain an array results\", function () {\r",
							"  const jsonResponse = pm.response.json();\r",
							"  pm.expect(jsonResponse).to.be.an(\"object\");\r",
							"  pm.expect(jsonResponse).to.have.property('results')\r",
							"  pm.expect(jsonResponse.results).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response must at least 1 offer\", function () {\r",
							"  const jsonResponse = pm.response.json();\r",
							"  pm.expect(jsonResponse.results.length).to.be.above(0);\r",
							"});\r",
							"\r",
							"function checkIfArrayIsUnique(array) {\r",
							"  return array.length === new Set(array).size;\r",
							"}\r",
							"\r",
							"pm.test('Check if Offer_ids are unique', () => {\r",
							"    let ids = []\r",
							"    _.each(pm.response.json().results, (item) => {\r",
							"        ids.push(item)\r",
							"    })\r",
							"\r",
							"    pm.expect(checkIfArrayIsUnique(ids), ids).to.be.true\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{api_url}}/similar_offers/{{offer_id}}?categories=LIVRE&categories=FILM&categories=SPECTACLE",
					"host": [
						"{{api_url}}"
					],
					"path": [
						"similar_offers",
						"{{offer_id}}"
					],
					"query": [
						{
							"key": "categories",
							"value": "LIVRE"
						},
						{
							"key": "categories",
							"value": "FILM"
						},
						{
							"key": "categories",
							"value": "SPECTACLE"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/similar_offers/offer_id search_group_names",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 10s\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});\r",
							"pm.test(\"Response must be a JSON and have a body\", function () {\r",
							"     pm.response.to.be.ok;\r",
							"     pm.response.to.be.withBody;\r",
							"     pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Response must contain an array results\", function () {\r",
							"  const jsonResponse = pm.response.json();\r",
							"  pm.expect(jsonResponse).to.be.an(\"object\");\r",
							"  pm.expect(jsonResponse).to.have.property('results')\r",
							"  pm.expect(jsonResponse.results).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response must at least 1 offer\", function () {\r",
							"  const jsonResponse = pm.response.json();\r",
							"  pm.expect(jsonResponse.results.length).to.be.above(0);\r",
							"});\r",
							"\r",
							"function checkIfArrayIsUnique(array) {\r",
							"  return array.length === new Set(array).size;\r",
							"}\r",
							"\r",
							"pm.test('Check if Offer_ids are unique', () => {\r",
							"    let ids = []\r",
							"    _.each(pm.response.json().results, (item) => {\r",
							"        ids.push(item)\r",
							"    })\r",
							"\r",
							"    pm.expect(checkIfArrayIsUnique(ids), ids).to.be.true\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{api_url}}/similar_offers/{{offer_id}}?search_group_names=LIVRES&search_group_names=FILMS_SERIES_CINEMA&search_group_names=SPECTACLES",
					"host": [
						"{{api_url}}"
					],
					"path": [
						"similar_offers",
						"{{offer_id}}"
					],
					"query": [
						{
							"key": "search_group_names",
							"value": "LIVRES"
						},
						{
							"key": "search_group_names",
							"value": "FILMS_SERIES_CINEMA"
						},
						{
							"key": "search_group_names",
							"value": "SPECTACLES"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/similar_offers/offer_id modelEndpoint default",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 10s\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});\r",
							"pm.test(\"Response must be a JSON and have a body\", function () {\r",
							"     pm.response.to.be.ok;\r",
							"     pm.response.to.be.withBody;\r",
							"     pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Response must contain an array results\", function () {\r",
							"  const jsonResponse = pm.response.json();\r",
							"  pm.expect(jsonResponse).to.be.an(\"object\");\r",
							"  pm.expect(jsonResponse).to.have.property('results')\r",
							"  pm.expect(jsonResponse.results).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response must at least 1 offer\", function () {\r",
							"  const jsonResponse = pm.response.json();\r",
							"  pm.expect(jsonResponse.results.length).to.be.above(0);\r",
							"});\r",
							"\r",
							"function checkIfArrayIsUnique(array) {\r",
							"  return array.length === new Set(array).size;\r",
							"}\r",
							"\r",
							"pm.test('Check if Offer_ids are unique', () => {\r",
							"    let ids = []\r",
							"    _.each(pm.response.json().results, (item) => {\r",
							"        ids.push(item)\r",
							"    })\r",
							"\r",
							"    pm.expect(checkIfArrayIsUnique(ids), ids).to.be.true\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{api_url}}/similar_offers/{{offer_id}}",
					"host": [
						"{{api_url}}"
					],
					"path": [
						"similar_offers",
						"{{offer_id}}"
					],
					"query": [
						{
							"key": "modelEndpoint",
							"value": "default",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/similar_offers/offer_id modelEndpoint random",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 10s\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});\r",
							"pm.test(\"Response must be a JSON and have a body\", function () {\r",
							"     pm.response.to.be.ok;\r",
							"     pm.response.to.be.withBody;\r",
							"     pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Response must contain an array results\", function () {\r",
							"  const jsonResponse = pm.response.json();\r",
							"  pm.expect(jsonResponse).to.be.an(\"object\");\r",
							"  pm.expect(jsonResponse).to.have.property('results')\r",
							"  pm.expect(jsonResponse.results).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response must at least 1 offer\", function () {\r",
							"  const jsonResponse = pm.response.json();\r",
							"  pm.expect(jsonResponse.results.length).to.be.above(0);\r",
							"});\r",
							"\r",
							"function checkIfArrayIsUnique(array) {\r",
							"  return array.length === new Set(array).size;\r",
							"}\r",
							"\r",
							"pm.test('Check if Offer_ids are unique', () => {\r",
							"    let ids = []\r",
							"    _.each(pm.response.json().results, (item) => {\r",
							"        ids.push(item)\r",
							"    })\r",
							"\r",
							"    pm.expect(checkIfArrayIsUnique(ids), ids).to.be.true\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{api_url}}/similar_offers/{{offer_id}}",
					"host": [
						"{{api_url}}"
					],
					"path": [
						"similar_offers",
						"{{offer_id}}"
					],
					"query": [
						{
							"key": "modelEndpoint",
							"value": "random",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}
