name: Main Workflow

on: [push]

env:
  DOCKER_REGISTRY_PROJECT_ID: passculture-infra-prod
  DOCKER_REGISTRY_REGION: europe-west1
  DOCKER_REGISTRY_REPOSITORY: pass-culture-artifact-registry

jobs:

  linter:
    name: "linter job"
    runs-on: [self-hosted, linux, x64]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4.7.0
        with:
          python-version: 3.7
      - name : Install Black 
        run: |
          python -m pip install --upgrade pip
          pip install -r  linter-requirements.txt      
      - name: Run Black
        run: black --check --verbose .
      - name: Post to a Slack channel
        id: slack
        if: ${{ failure() }}
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: "C05Q7UE8D9R" # alerts_data
          payload: |
            {
              "attachments": [
                  {
                      "mrkdwn_in": ["text"],
                      "color": "#A30002",
                      "author_name": "${{github.actor}}",
                      "author_link": "https://github.com/${{github.actor}}",
                      "author_icon": "https://github.com/${{github.actor}}.png",
                      "title": "Linter",
                      "title_link": "https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}",
                      "text": "Linter Job is failed :boom:"
                  }
              ],
              "unfurl_links": false,
              "unfurl_media": false
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

##########  API Reco Coverage Test   ############# 

  api-reco-coverage-test:
    name: "API Reco Coverage test"
    needs: linter
    #if: github.ref == 'refs/heads/master'
    runs-on: [self-hosted, linux, x64]
    defaults:
     run: 
       working-directory: "apps/recommendation/api"
    services:
      postgres:
        image: kartoza/postgis:12.4
        env:
          POSTGRES_PASS: postgres
          POSTGRES_USER: postgres
          POSTGRES_DBNAME: db
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4.7.0
        with:
         python-version: 3.7
      - name : Install requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r api-dev-requirements.txt
      - run: cat /etc/os-release
      - name : Install psql client 
        run: sudo apt update && sudo apt install -y postgresql-client
      - name : Run tests
        env:
         PG_HOST: "localhost"
        run:  |
          export PYTHONPATH=$PYTHONPATH:~/data-gcp/apps/recommendation/api
          ./run_tests.sh
      - name: Post to a Slack channel
        id: slack
        if: ${{ failure() }}
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: "C05Q7UE8D9R" # alerts_data
          payload: |
            {
              "attachments": [
                  {
                      "mrkdwn_in": ["text"],
                      "color": "#A30002",
                      "author_name": "${{github.actor}}",
                      "author_link": "https://github.com/${{github.actor}}",
                      "author_icon": "https://github.com/${{github.actor}}.png",
                      "title": "API Reco Integration Test on ${{ inputs.ENV }}",
                      "title_link": "https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}",
                      "text": "Coverage tests is failed :boom:"
                  }
              ],
              "unfurl_links": false,
              "unfurl_media": false
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

 ########## Tests Integration #############     

  dev-api-reco-test-integration:
    uses: ./.github/workflows/api_reco_test_integration.yml
    needs: api-reco-coverage-test
    with:
      ENV: dev
      DATA_GCP_PROJECT: "passculture-data-ehp"
    secrets:
      GCP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
      ARTIFACT_REGISTRY_SERVICE_ACCOUNT: ${{ secrets.ARTIFACT_REGISTRY_SERVICE_ACCOUNT }}
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
  stg-api-reco-test-integration:
    if: github.ref == 'refs/heads/staging'
    uses: ./.github/workflows/api_reco_test_integration.yml
    with:
      ENV: stg
      DATA_GCP_PROJECT: "passculture-data-ehp"
    secrets:
      GCP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
      ARTIFACT_REGISTRY_SERVICE_ACCOUNT: ${{ secrets.ARTIFACT_REGISTRY_SERVICE_ACCOUNT }}
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
  prod-api-reco-test-integration:
    if: github.ref == 'refs/heads/production'
    uses: ./.github/workflows/api_reco_test_integration.yml
    with:
      ENV: prod
      DATA_GCP_PROJECT: "passculture-data-ehp"
    secrets:
      GCP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
      ARTIFACT_REGISTRY_SERVICE_ACCOUNT: ${{ secrets.ARTIFACT_REGISTRY_SERVICE_ACCOUNT }}
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}


####### API RECO Deploy ################

  dev-deploy-api-reco:
   # if: github.ref == 'refs/heads/master'
    needs: dev-api-reco-test-integration
    uses: ./.github/workflows/build_and_deploy_api.yml
    with:
      API_NAME: recommendation
      API_SOURCE_PATH: "apps/recommendation/api"
      DATA_GCP_PROJECT: "passculture-data-ehp"
      API_SERVICE_NAME: "apireco-dev"
    secrets:
      GCP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
      ARTIFACT_REGISTRY_SERVICE_ACCOUNT: ${{ secrets.ARTIFACT_REGISTRY_SERVICE_ACCOUNT }}
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

  stg-deploy-api-reco:
    if: github.ref == 'refs/heads/staging'
    needs: stg-api-reco-test-integration
    uses: ./.github/workflows/build_and_deploy_api.yml
    with:
      API_NAME: recommendation
      API_SOURCE_PATH: "apps/recommendation/api"
      DATA_GCP_PROJECT: "passculture-data-ehp"
      API_SERVICE_NAME: "TO-BE-CHANGED"
    secrets:
      GCP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
      ARTIFACT_REGISTRY_SERVICE_ACCOUNT: ${{ secrets.ARTIFACT_REGISTRY_SERVICE_ACCOUNT }}
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

  prod-deploy-api-reco:
    if: github.ref == 'refs/heads/production'
    needs: prod-api-reco-test-integration
    uses: ./.github/workflows/build_and_deploy_api.yml
    with:
      API_NAME: recommendation
      API_SOURCE_PATH: "apps/recommendation/api"
      DATA_GCP_PROJECT: "passculture-data-prod"
      API_SERVICE_NAME: "TO-BE-CHANGED"    
    secrets:
      GCP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
      ARTIFACT_REGISTRY_SERVICE_ACCOUNT: ${{ secrets.ARTIFACT_REGISTRY_SERVICE_ACCOUNT }}
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}